package uo.ri.cws.domain;

import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TimeZone;

import com.sun.jdi.connect.Connector.Argument;

import alb.util.assertion.ArgumentChecks;
import alb.util.assertion.StateChecks;
import alb.util.math.Round;

public class Invoice {
	
	private static LocalDate VAT_THRESHOLD;

	static {
		Calendar c = Calendar.getInstance();
		c.set(Calendar.YEAR, 2012);
		c.set(Calendar.MONTH, 7);
		c.set(Calendar.DAY_OF_MONTH, 1);

		VAT_THRESHOLD = LocalDate.ofInstant(c.getTime().getTime(),ZoneId.getDefault());;
	}
	public enum InvoiceStatus { NOT_YET_PAID, PAID }

	// natural attributes
	private Long number;
	private LocalDate date;
	private double amount;
	private double vat;
	private InvoiceStatus status = InvoiceStatus.NOT_YET_PAID;

	// accidental attributes
	private Set<WorkOrder> workOrders = new HashSet<>();
	private Set<Charge> charges = new HashSet<>();

	Invoice() {
	}

	public Invoice(Long number) {
		this(number, new Date());
	}

	public Invoice(Long number, LocalDate date) {
		ArgumentChecks.isNotNull(date);
		ArgumentChecks.isNotNull(number);
		this.number = number;
		this.date =date;
	}

	public Invoice(Long number, List<WorkOrder> workOrders) {
		this(number,  LocalDate.now());
		addWorkOrders(workOrders);
	}

	public Invoice(Long number, LocalDate date, List<WorkOrder> workOrders) {
		this(number, date);
		addWorkOrders(workOrders);
	}
	
	private void addWorkOrders(List<WorkOrder> workOrders) {
		ArgumentChecks.isNotNull(workOrders);
		for (WorkOrder w : workOrders)
			this.addWorkOrder(w);
	}
	
	/**
	 * Computed amount and vat (vat depends on the date)
	 */
	private void computeAmount() {
		amount = .0;
		vat = date.before(VAT_THRESHOLD) ? 18 : 21;
		for (WorkOrder w : workOrders)
			amount += w.getAmount();

		amount = Round.twoCents(amount * (vat / 100.0 + 1));
	}

	/**
	 * Adds (double links) the workOrder to the invoice and updates the amount and
	 * vat
	 * 
	 * @param workOrder
	 * @see InvoiceStatus diagrams on the problem statement document
	 * @throws IllegalStateException if the invoice status is not NOT_YET_PAID
	 */
	public void addWorkOrder(WorkOrder workOrder) {
		StateChecks.isTrue(status.equals(InvoiceStatus.NOT_YET_PAID), "Invoice is paid");
		Associations.ToInvoice.link(workOrder, this);
		workOrder.markAsInvoiced();
		computeAmount();
	}

	/**
	 * Removes a work order from the invoice and recomputes amount and vat
	 * 
	 * @param workOrder
	 * @see InvoiceStatus diagrams on the problem statement document
	 * @throws IllegalStateException if the invoice status is not NOT_YET_PAID
	 */
	public void removeWorkOrder(WorkOrder workOrder) {
		StateChecks.isTrue(status.equals(InvoiceStatus.NOT_YET_PAID), "Invoice is paid");
		Associations.ToInvoice.unlink(workOrder, this);
		workOrder.markBackToFinished();
		computeAmount();
	}

	/**
	 * Marks the invoice as PAID, but
	 * 
	 * @throws IllegalStateException if - Is already settled - Or the amounts paid
	 *                               with charges to payment means do not cover the
	 *                               total of the invoice
	 */
	public void settle() {
		StateChecks.isFalse(status.equals(InvoiceStatus.PAID), "Invoice is already settled");
		double money = charges.stream().mapToDouble(c -> c.getAmount()).sum();
		StateChecks.isTrue(amount > money, "Payment Mean does not cover total amount");
		status = InvoiceStatus.PAID;
	}

	public Set<WorkOrder> getWorkOrders() {
		return new HashSet<>( workOrders );
	}

	Set<WorkOrder> _getWorkOrders() {
		return workOrders;
	}

	public Set<Charge> getCharges() {
		return new HashSet<>( charges );
	}

	Set<Charge> _getCharges() {
		return charges;
	}

}
